local globalEvents = Events
local Events = {}

local StarlitEvents = require "Starlit/Events"

-- Initialize tables to store event functions
Events.Functions = {}

--- containerObj is the IsoObject(World Object) of which the InventoryItem originates
Events.OnLoadExistingItem = StarlitEvents.new()
---@alias LSMRR.Events.Callback_OnLoadExistingItem fun(item:InventoryItem, containerObj:IsoObject)

-- Checks an individual item and processes its containers if it is an InventoryContainer
function Events.Functions.checkItem(item, containerObj)
    if not item then return end
    if instanceof(item, "InventoryContainer") then
        if item:getInventory() then
            Events.Functions.checkFromContainer(item:getInventory(), containerObj)
        elseif item:getItemContainer() then
            Events.Functions.checkFromContainer(item:getItemContainer(), containerObj)
        end
    end
    if instanceof(item, "InventoryItem") then
        Events.OnLoadExistingItem:trigger(item, containerObj)
    end
end

function Events.Functions.checkFromContainer(container, containerObj)
    if not container then return end
    local containerItems = container:getItems()
    if not containerItems then return end
    for i=0, containerItems:size()-1 do
        local item = containerItems:get(i)
        Events.Functions.checkItem(item, containerObj)
    end
end

-- Handles checking multiple containers in an object or a single container
function Events.Functions.checkAllPossibleContainers(containerObj)
    if containerObj:getContainerCount() and containerObj:getContainerCount() > 1 then
        -- Process multiple containers
        for containerIndex = 0, containerObj:getContainerCount() do
            Events.Functions.checkFromContainer(containerObj:getContainerByIndex(containerIndex), containerObj)
        end
    else
        -- Process single container
        if containerObj:getItemContainer() then
            Events.Functions.checkFromContainer(containerObj:getItemContainer(), containerObj)
        else
            Events.Functions.checkFromContainer(containerObj:getContainer(), containerObj)
        end
    end
end

-- Processes all inventories in an inventory page, including backpacks and vehicle parts
function Events.Functions.checkAllInventories(isInventoryPage)
    local containerObj
    for i,v in ipairs(isInventoryPage.backpacks) do
        -- Check parent inventory containers
        if v.inventory:getParent() then
            containerObj = v.inventory:getParent()
            if instanceof(containerObj, "IsoObject") and
            (containerObj:getContainer() or containerObj:getItemContainer()) then
                Events.Functions.checkAllPossibleContainers(containerObj)
            end
        end
        -- Check vehicle part containers
        if v.inventory:getVehiclePart() then
            containerObj = v.inventory:getVehiclePart()
            if not containerObj then return end
            if not instanceof(containerObj, "IsoObject")
            and containerObj:getItemContainer() then
                Events.Functions.checkFromContainer(containerObj:getItemContainer())
            end
        end
    end
end

local objectTypesToCheck = {
    "IsoWorldInventoryObject",
    "IsoTrap",
}

local function hasGetItemMethod(obj)
    for i, objectType in ipairs(objectTypesToCheck) do
        if instanceof(obj, objectType) then return true end
    end
    return false
end

-- Checks a game world grid square for items
function Events.Functions.checkGridsquareForItems(gridSquare)
    if not gridSquare then return end
    local worldObjects = gridSquare:getWorldObjects()
    if worldObjects:size() == 0 then return end
    for i = 0, worldObjects:size() - 1 do
        local object = worldObjects:get(i)
        if not object and not hasGetItemMethod(object) then return end
        local item = object:getItem()
        Events.Functions.checkItem(item, nil)
    end
end

-- Checks for inventory window refresh
function Events.Functions.checkForItemsOnRefreshEnd(isInventoryPage, state)
    if not state == "end" then return end
    Events.Functions.checkAllInventories(isInventoryPage)
end

--- Checks new container when generated by server
function Events.Functions.checkForItemsOnFillContainer(roomType, containerType, container)
    if container:isExplored() or container:isHasBeenLooted() then return end
    Events.Functions.checkFromContainer(container, container:getParent())
end

--- Checks player inventory
function Events.Functions.checkPlayerForItems(playerIndex, player)
    local playerName = tostring(player:getName())
    print("Initializing player: " .. playerName)
    local inventory = player:getInventory()
    if not inventory then print("No inventory found on " .. playerName) return end
    Events.Functions.checkFromContainer(inventory, player)
end

-- Register event listeners
globalEvents.LoadGridsquare.Add(Events.Functions.checkGridsquareForItems)
globalEvents.ReuseGridsquare.Add(Events.Functions.checkGridsquareForItems)
--globalEvents.OnRefreshInventoryWindowContainers.Add(Events.Functions.checkForItemsOnRefreshEnd)
--globalEvents.OnFillContainer.Add(Events.Functions.checkForItemsOnFillContainer)
--globalEvents.OnCreatePlayer.Add(Events.Functions.checkPlayerForItems)

return Events